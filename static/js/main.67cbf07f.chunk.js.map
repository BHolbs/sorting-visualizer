{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["quicksortWrapper","array","animations","arrayCopy","slice","length","quicksort","lo","hi","anims","pivot","j","i","push","partition","getMergeSortAnimations","auxiliaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","heapSortWrapper","n","heapify","heapsort","size","largest","left","right","ANIMATION_SPEED_MS","window","innerWidth","NUMBER_OF_ARRAY_BARS","SortingVisualizer","props","state","explanation","isSorted","this","resetArray_Random","randomIntFromInterval","innerHeight","setState","sort","a","b","reverse","arrI","arrJ","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","alert","barIdx","bubblesort","bubblesortWrapper","animation_speed_bubble","className","onClick","resetArray_Reversed","resetArray_MostlySorted","map","value","idx","key","bubbleSort","mergeSort","quickSort","heapSort","React","Component","min","max","random","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67cbf07f.chunk.js","sourcesContent":["// BUBBLE SORT FUNCTIONS\r\nexport function bubblesortWrapper(array) {\r\n  const animations = [];\r\n  var arrayCopy = array.slice();\r\n  if (array.length <= 1) return array;\r\n  bubblesort(arrayCopy, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubblesort(array, animations) {\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      animations.push([j, j+1, 'compare']);\r\n      animations.push([j, j+1, 'uncompare']);\r\n      if (array[j] > array[j+1]) {\r\n        animations.push([j, array[j+1], 'swap']);\r\n        animations.push([j+1, array[j], 'swap']);\r\n        [array[j], array[j+1]] = [array[j+1], array[j]];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// QUICK SORT FUNCTIONS\r\nexport function quicksortWrapper(array) {\r\n  const animations = [];\r\n  var arrayCopy = array.slice();\r\n  if (array.length <= 1) return array;\r\n  quicksort(arrayCopy, 0, arrayCopy.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quicksort(array, lo, hi, anims) {\r\n  if (lo < hi) {\r\n    let pivot = partition(array, lo, hi, anims);\r\n    quicksort(array, lo, pivot-1, anims);\r\n    quicksort(array, pivot+1, hi, anims);\r\n  }\r\n  return anims;\r\n}\r\n\r\nfunction partition(array, lo, hi, anims) {\r\n  let pivot = array[hi];\r\n  let i = lo;\r\n  let j;\r\n  for (j = lo; j < hi; j++) {\r\n    anims.push([hi, j, 'compare']);\r\n    anims.push([hi, j, 'uncompare']);\r\n    if (array[j] < pivot) {\r\n      anims.push([i, array[j], 'swap']);\r\n      anims.push([j, array[i], 'swap']);\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n      i = i+1;\r\n    }\r\n  }\r\n  anims.push([i, array[hi], 'swap']);\r\n  anims.push([hi, array[i], 'swap']);\r\n  [array[i], array[hi]] = [array[hi], array[i]];\r\n  return i;\r\n}\r\n\r\n\r\n// MERGE SORT FUNCTIONS\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  var arrayCopy = array.slice();\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(arrayCopy, 0, arrayCopy.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\n// HEAP SORT FUNCTIONS\r\nexport  function heapSortWrapper(array) {\r\n  const animations = [];\r\n  var arrayCopy = array.slice();\r\n  if (array.length <= 1) return array;\r\n  heapsort(arrayCopy, animations);\r\n  return animations;\r\n}\r\n\r\nfunction heapsort(array, animations) {\r\n  let n = array.length;\r\n\r\n  for (let i = (n/2)-1; i >= 0; i--) {\r\n    heapify(array, n, i, animations);\r\n  }\r\n\r\n  for (let i = n-1; i > 0; i--) {\r\n    animations.push([0, array[i], 'swap']);\r\n    animations.push([i, array[0], 'swap']);\r\n    [array[0], array[i]] = [array[i], array[0]];\r\n    heapify(array, i, 0, animations);\r\n  }\r\n}\r\n\r\nfunction heapify(array, size, i, animations) {\r\n  let largest = i;\r\n  let left = 2 * i + 1;\r\n  let right = 2 * i + 2;\r\n\r\n  if (left < size && array[i] < array[left]) {\r\n    animations.push([i, left, 'compare'])\r\n    animations.push([i, left, 'uncompare'])\r\n    largest = left;\r\n  }\r\n\r\n  if (right < size && array[largest] < array[right]) {\r\n    animations.push([i, right, 'compare'])\r\n    animations.push([i, right, 'uncompare'])\r\n    largest = right;\r\n  }\r\n\r\n  if (largest !== i) {\r\n    animations.push([i, array[largest], 'swap']);\r\n    animations.push([largest, array[i], 'swap']);\r\n    [array[i], array[largest]] = [array[largest], array[i]];\r\n\r\n    heapify(array, size, largest, animations)\r\n  }\r\n}","import React from 'react';\r\nimport {getMergeSortAnimations, bubblesortWrapper, quicksortWrapper, heapSortWrapper} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = window.innerWidth > 720 ? 1 : 10;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nlet NUMBER_OF_ARRAY_BARS = Math.floor(((window.innerWidth+1-125)/6)/10)*10;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'deepskyblue';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      explanation: 'Try a sorting algorithm out with the buttons below! This text will change and give some information on each one! You can also change the initial configuration of the array with the buttons above.',\r\n      isSorted: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray_Random();\r\n  }\r\n\r\n  resetArray_Random() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, Math.floor(((window.innerHeight-250)))));\r\n    }\r\n    this.setState({array});\r\n    this.setState({isSorted: false});\r\n    this.setState({explanation: \"A random set of data is the most common scenario for a sorting algorithm, and you get a good sense of the average performance with data that is random.\"});\r\n  }\r\n\r\n  resetArray_Reversed() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, Math.floor(((window.innerHeight-250)))));\r\n    }\r\n\r\n    array.sort(function(a,b){return a-b});\r\n    array.reverse();\r\n    this.setState({array});\r\n    this.setState({isSorted: false});\r\n    this.setState({explanation: \"A reversed array can sometimes cause an otherwise quick sorting algorithm to stumble. Try one out!\"});\r\n  }\r\n\r\n  resetArray_MostlySorted() {\r\n    const array = [];\r\n\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, Math.floor((window.innerHeight-250))));\r\n    }\r\n\r\n    array.sort(function(a,b){return a-b});\r\n    for (let i = 0; i < Math.floor(NUMBER_OF_ARRAY_BARS/4); i++) {\r\n      let arrI = randomIntFromInterval(0, NUMBER_OF_ARRAY_BARS);\r\n      let arrJ = arrI;\r\n      while (arrI === arrJ) {\r\n        arrJ = randomIntFromInterval(0, NUMBER_OF_ARRAY_BARS)\r\n      }\r\n      [array[arrI], array[arrJ]] = [array[arrJ], array[arrI]];\r\n    }\r\n\r\n    this.setState({array});\r\n    this.setState({isSorted: false});\r\n    this.setState({explanation: \"Like a reversed array, a nearly sorted array can sometimes really trip up the faster sorting algorithms.\"});\r\n  }\r\n\r\n  mergeSort() {\r\n    if (this.state.isSorted === true) {\r\n      alert(\"The array is already sorted!\");\r\n      return;\r\n    }\r\n    this.setState({isSorted: true});\r\n    this.setState({explanation: 'Merge sort is a recursive sorting algorithm, it divides the list down to its individual elements, and then merges them together in order. Merge sort is special in that it performs very well regardless of the shape of the input.'});\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    if (this.state.isSorted === true) {\r\n      alert(\"The array is already sorted!\");\r\n      return;\r\n    }\r\n    this.setState({isSorted: true});\r\n    const animations = quicksortWrapper(this.state.array);\r\n    this.setState({explanation: 'Quick sort is very clever. It selects a random element in the array, and then moves all elements smaller than it to the left, and keeping bigger elements to the right. Then it repeats! Quicksort performs better the more random a list is, and tends to not do well if the list is not very random.'});\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (animations[i][2] === 'compare' || animations[i][2] === 'uncompare') {\r\n        const barOneIdx = animations[i][0];\r\n        const barTwoIdx = animations[i][1];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = animations[i][2] === 'compare' ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const barIdx = animations[i][0];\r\n          const newHeight = animations[i][1];\r\n          const barStyle = arrayBars[barIdx].style;\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    if (this.state.isSorted === true) {\r\n      alert(\"The array is already sorted!\");\r\n      return;\r\n    }\r\n    this.setState({isSorted: true});\r\n    this.setState({explanation: 'Heapsort is kind of like a smarter bubble sort, instead of checking everything in the list for every object, it cleverly finds the largest element and puts it at the start of the already sorted region. Heapsort performs well regardless of the shape of the input.'});\r\n    const animations = heapSortWrapper(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (animations[i][2] === 'compare' || animations[i][2] === 'uncompare') {\r\n        const barOneIdx = animations[i][0];\r\n        const barTwoIdx = animations[i][1];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = animations[i][2] === 'compare' ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const barIdx = animations[i][0];\r\n          const newHeight = animations[i][1];\r\n          const barStyle = arrayBars[barIdx].style;\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    if (this.state.isSorted === true) {\r\n      alert(\"The array is already sorted!\");\r\n      return;\r\n    }\r\n    this.setState({isSorted: true});\r\n    this.setState({explanation: 'Bubble sort is one of the simplest sorting algorithms ever made, however it is very slow. It runs through the full length of the array for every element in the array, so it performs pretty badly regardless of the shape of input.'});\r\n    const animations = bubblesortWrapper(this.state.array);\r\n    const animation_speed_bubble = ANIMATION_SPEED_MS;\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (animations[i][2] === 'compare' || animations[i][2] === 'uncompare') {\r\n        const barOneIdx = animations[i][0];\r\n        const barTwoIdx = animations[i][1];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = animations[i][2] === 'compare' ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * animation_speed_bubble);\r\n      } else {\r\n        setTimeout(() => {\r\n          const barIdx = animations[i][0];\r\n          const newHeight = animations[i][1];\r\n          const barStyle = arrayBars[barIdx].style;\r\n          barStyle.height = `${newHeight}px`;\r\n        }, (i * animation_speed_bubble));\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const array = this.state.array;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        <button onClick={() => this.resetArray_Random()}>Generate New RANDOM Array</button>\r\n        <button onClick={() => this.resetArray_Reversed()}>Generate New REVERSED Array</button>\r\n        <button onClick={() => this.resetArray_MostlySorted()}>Generate New NEARLY SORTED Array</button>\r\n        <br></br>\r\n        <br></br>\r\n        <div className=\"sort-explanation\">{this.state.explanation}</div>\r\n        <br></br>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <br></br>\r\n        <br></br>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button onClick={() => this.quickSort()}>Quicksort</button>\r\n        <button onClick={() => this.heapSort()}>Heapsort</button>\r\n        <br></br>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}