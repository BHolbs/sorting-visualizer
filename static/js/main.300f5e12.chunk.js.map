{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["quicksortWrapper","array","animations","length","quicksort","lo","hi","anims","pivot","j","i","push","partition","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","heapSortWrapper","n","heapify","heapsort","size","largest","left","right","ANIMATION_SPEED_MS","window","innerWidth","NUMBER_OF_ARRAY_BARS","SortingVisualizer","props","state","this","resetArray","min","max","innerHeight","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","barIdx","bubblesort","bubblesortWrapper","animation_speed_bubble","className","onClick","map","value","idx","key","bubbleSort","mergeSort","quickSort","heapSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.300f5e12.chunk.js","sourcesContent":["// BUBBLE SORT FUNCTIONS\r\nexport function bubblesortWrapper(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  bubblesort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubblesort(array, animations) {\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      animations.push([j, j+1, 'compare']);\r\n      animations.push([j, j+1, 'uncompare']);\r\n      if (array[j] > array[j+1]) {\r\n        animations.push([j, array[j+1], 'swap']);\r\n        animations.push([j+1, array[j], 'swap']);\r\n        [array[j], array[j+1]] = [array[j+1], array[j]];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// QUICK SORT FUNCTIONS\r\nexport function quicksortWrapper(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  quicksort(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quicksort(array, lo, hi, anims) {\r\n  if (lo < hi) {\r\n    let pivot = partition(array, lo, hi, anims);\r\n    quicksort(array, lo, pivot-1, anims);\r\n    quicksort(array, pivot+1, hi, anims);\r\n  }\r\n  return anims;\r\n}\r\n\r\nfunction partition(array, lo, hi, anims) {\r\n  let pivot = array[hi];\r\n  let i = lo;\r\n  let j;\r\n  for (j = lo; j < hi; j++) {\r\n    anims.push([hi, j, 'compare']);\r\n    anims.push([hi, j, 'uncompare']);\r\n    if (array[j] < pivot) {\r\n      anims.push([i, array[j], 'swap']);\r\n      anims.push([j, array[i], 'swap']);\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n      i = i+1;\r\n    }\r\n  }\r\n  anims.push([i, array[hi], 'swap']);\r\n  anims.push([hi, array[i], 'swap']);\r\n  [array[i], array[hi]] = [array[hi], array[i]];\r\n  return i;\r\n}\r\n\r\n\r\n// MERGE SORT FUNCTIONS\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\n// HEAP SORT FUNCTIONS\r\nexport  function heapSortWrapper(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  heapsort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction heapsort(array, animations) {\r\n  let n = array.length;\r\n\r\n  for (let i = (n/2)-1; i >= 0; i--) {\r\n    heapify(array, n, i, animations);\r\n  }\r\n\r\n  for (let i = n-1; i > 0; i--) {\r\n    animations.push([0, array[i], 'swap']);\r\n    animations.push([i, array[0], 'swap']);\r\n    [array[0], array[i]] = [array[i], array[0]];\r\n    heapify(array, i, 0, animations);\r\n  }\r\n}\r\n\r\nfunction heapify(array, size, i, animations) {\r\n  let largest = i;\r\n  let left = 2 * i + 1;\r\n  let right = 2 * i + 2;\r\n\r\n  if (left < size && array[i] < array[left]) {\r\n    animations.push([i, left, 'compare'])\r\n    animations.push([i, left, 'uncompare'])\r\n    largest = left;\r\n  }\r\n\r\n  if (right < size && array[largest] < array[right]) {\r\n    animations.push([i, right, 'compare'])\r\n    animations.push([i, right, 'uncompare'])\r\n    largest = right;\r\n  }\r\n\r\n  if (largest !== i) {\r\n    animations.push([i, array[largest], 'swap']);\r\n    animations.push([largest, array[i], 'swap']);\r\n    [array[i], array[largest]] = [array[largest], array[i]];\r\n\r\n    heapify(array, size, largest, animations)\r\n  }\r\n}","import React from 'react';\r\nimport {getMergeSortAnimations, bubblesortWrapper, quicksortWrapper, heapSortWrapper} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = window.innerWidth > 720 ? 1 : 10;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nlet NUMBER_OF_ARRAY_BARS = Math.floor(((window.innerWidth+1-125)/6)/10)*10;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray(false);\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, Math.floor(((window.innerHeight-200)))));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const animations = quicksortWrapper(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (animations[i][2] === 'compare' || animations[i][2] === 'uncompare') {\r\n        const barOneIdx = animations[i][0];\r\n        const barTwoIdx = animations[i][1];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = animations[i][2] === 'compare' ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const barIdx = animations[i][0];\r\n          const newHeight = animations[i][1];\r\n          const barStyle = arrayBars[barIdx].style;\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const animations = heapSortWrapper(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (animations[i][2] === 'compare' || animations[i][2] === 'uncompare') {\r\n        const barOneIdx = animations[i][0];\r\n        const barTwoIdx = animations[i][1];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = animations[i][2] === 'compare' ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const barIdx = animations[i][0];\r\n          const newHeight = animations[i][1];\r\n          const barStyle = arrayBars[barIdx].style;\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = bubblesortWrapper(this.state.array);\r\n    const animation_speed_bubble = ANIMATION_SPEED_MS / 2;\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (animations[i][2] === 'compare' || animations[i][2] === 'uncompare') {\r\n        const barOneIdx = animations[i][0];\r\n        const barTwoIdx = animations[i][1];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = animations[i][2] === 'compare' ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * animation_speed_bubble);\r\n      } else {\r\n        setTimeout(() => {\r\n          const barIdx = animations[i][0];\r\n          const newHeight = animations[i][1];\r\n          const barStyle = arrayBars[barIdx].style;\r\n          barStyle.height = `${newHeight}px`;\r\n        }, (i * animation_speed_bubble));\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <br></br>\r\n        <br></br>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <br></br>\r\n        <br></br>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <br></br>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}